{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","components/Footer.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","switchMode","navbarTiltle","type","id","onClick","toggleMode","role","htmlFor","prototype","PropTypes","string","isRequired","about","defaultProps","TextForm","useState","text","setText","scrollSmoth","window","scrollTo","top","behavior","style","color","heading","value","onChange","event","target","rows","backgroundColor","newText","toUpperCase","showAlert","disabled","toLowerCase","length","charAt","slice","navigator","clipboard","writeText","document","getSelection","removeAllRanges","newStr","split","join","filter","elemnt","Alert","capitalize","height","alert","mssge","Footer","justifyContent","textAlign","position","href","App","mode","setMode","headerText","setAlert","alertType","alertMessage","setTimeout","body","getElementById","innerHTML","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.66e1826d.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n//props is used to fetch data from parent fucntion component to child functional component Like In Angular we use input tag\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.switchMode} bg-${props.switchMode}`}>\r\n      <div className=\"container-fluid\">\r\n        <div className=\"navbar-brand\">{props.navbarTiltle}</div>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <div className=\"nav-link active\" aria-current=\"page\">\r\n                Home\r\n              </div>\r\n            </li>\r\n          </ul>\r\n        <div className={`form-check form-switch text-${props.switchMode==='light'?'dark':'light'}`}>\r\n          <input className=\"form-check-input\"  onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"darkModeBtn\" />\r\n          <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\" id=\"modeLabel\">Switch To Dark Mode</label>\r\n        </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\n\r\n/* \r\n1. Props are used to pass data dynamically when the content in the html has to change dynamically as per condition.\r\n\r\n2. Props in REACT JS are same as (@INPUT) directive in angular to bind data dynamically.\r\n\r\n3. You Can set the data types of props as per requirement.\r\n\r\n4.You can set the default props so that if no one enter the details then default text will be shown using default props.\r\n\r\n*/\r\n\r\n//Set Proptype Datatypes\r\nNavbar.prototype = {\r\n  navbarTiltle: PropTypes.string.isRequired,\r\n  about: PropTypes.string,\r\n};\r\n\r\n//Set Default Proptype \r\nNavbar.defaultProps = {\r\n  navbarTiltle: \"Default Title\",\r\n  about: \"Default About\",\r\n};\r\n","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./TextForm.css\";\r\n\r\nexport default function TextForm(props) {\r\n  const [text, setText] = useState(\"\");\r\n\r\n  const scrollSmoth = () => {\r\n    window.scrollTo({\r\n      top: 0,\r\n      behavior: \"smooth\",\r\n    });\r\n  };\r\n  const handleUpperCase = () => {\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n    props.showAlert(\"success\", \"converted to uppercase\");\r\n    scrollSmoth();\r\n  };\r\n\r\n  const handleLoweCase = () => {\r\n    let newText = text.toLowerCase();\r\n    setText(newText);\r\n    props.showAlert(\"success\", \"converted to lowercase\");\r\n    scrollSmoth();\r\n  };\r\n\r\n  const handleDetectChange = (event) => {\r\n    setText(event.target.value);\r\n  };\r\n\r\n  const handleCopyText = () => {\r\n    navigator.clipboard.writeText(text);\r\n    document.getSelection().removeAllRanges();\r\n    props.showAlert(\"success\", \"text has been copied\");\r\n    scrollSmoth();\r\n  };\r\n\r\n  const handleExtraSpaces = () => {\r\n    var newStr = text.split(/[ ]+/);\r\n    setText(newStr.join(\" \"));\r\n    props.showAlert(\"success\", \"Extra spaces removed\");\r\n    scrollSmoth();\r\n  };\r\n\r\n  const clearText = () => {\r\n    setText(\"\");\r\n    props.showAlert(\"success\", \"all text has been cleared\");\r\n    scrollSmoth();\r\n  };\r\n\r\n  const convertFirstCharcCaps = () => {\r\n    setText(text.charAt(0).toUpperCase() + text.slice(1));\r\n    scrollSmoth();\r\n  };\r\n  /*\r\n    in React to set text as it is a functionall based component to set value we have to use other\r\n    not like class based component.LIKE\r\n\r\n    For Class Based we do to change the state\r\n    text = 'ABCED' // TO set the new value of text.\r\n\r\n    But For Fucntional based we have to use \"useState\" Hooks to change the state\r\n    setText('ABCED')\r\n  */\r\n  return (\r\n    <>\r\n      <div className=\"container my-3\">\r\n        <h2\r\n          className=\"mb-4\"\r\n          style={{ color: props.switchMode === \"light\" ? \"black\" : \"white\" }}\r\n        >\r\n          {props.heading}\r\n        </h2>\r\n        <div className=\"mb-3\">\r\n          <textarea\r\n            className=\"form-control\"\r\n            value={text}\r\n            onChange={handleDetectChange}\r\n            id=\"mytextBox\"\r\n            rows=\"8\"\r\n            style={{\r\n              backgroundColor:\r\n                props.switchMode === \"light\" ? \"white\" : \"#80808042\",\r\n              color: props.switchMode === \"light\" ? \"black\" : \"white\",\r\n            }}\r\n          ></textarea>\r\n        </div>\r\n        <div>\r\n          <button\r\n            className=\"btn btn-primary mx-1 my-1\"\r\n            onClick={handleUpperCase}\r\n            disabled={!text}\r\n          >\r\n            Convert Text To Uppercase\r\n          </button>\r\n          <button\r\n            className=\"btn btn-primary mx-1 my-1\"\r\n            onClick={handleLoweCase}\r\n            disabled={text.length === 0}\r\n          >\r\n            Convert Text To Lower Case\r\n          </button>\r\n          <button\r\n            className=\"btn btn-primary mx-1 my-1\"\r\n            onClick={convertFirstCharcCaps}\r\n            disabled={text.length === 0}\r\n          >\r\n            Convert First Charc Caps\r\n          </button>\r\n          <button\r\n            className=\"btn btn-primary mx-1 my-1\"\r\n            onClick={handleCopyText}\r\n            disabled={text.length === 0}\r\n          >\r\n            Copy Text\r\n          </button>\r\n          <button\r\n            className=\"btn btn-primary mx-1 my-1\"\r\n            onClick={handleExtraSpaces}\r\n            disabled={text.length === 0}\r\n          >\r\n            Handle Text Spaces\r\n          </button>\r\n          <button\r\n            className=\"btn btn-primary mx-1 my-1\"\r\n            onClick={clearText}\r\n            disabled={text.length === 0}\r\n          >\r\n            Clear Text\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <div\r\n        className=\"container my-2\"\r\n        style={{ color: props.switchMode === \"light\" ? \"black\" : \"white\" }}\r\n      >\r\n        <h2>Your Text Summary</h2>\r\n        <div className=\"text-summary\">\r\n          <p className=\"text-details\">\r\n            {\r\n              text.split(/\\s+/).filter((elemnt) => {\r\n                return elemnt.length !== 0;\r\n              }).length\r\n            }{\" \"}\r\n            words\r\n          </p>\r\n          <p>{text.length} characters</p>\r\n        </div>\r\n        <div>\r\n          <p>\r\n            {0.008 *\r\n              text.split(\" \").filter((elemnt) => {\r\n                return elemnt.length !== 0;\r\n              }).length}{\" \"}\r\n            takes times to read the text\r\n          </p>\r\n        </div>\r\n      </div>\r\n      <div\r\n        className=\"container my-2\"\r\n        style={{ color: props.switchMode === \"light\" ? \"black\" : \"white\" }}\r\n      >\r\n        <h2>Preview</h2>\r\n        <div className=\"text-summary\">\r\n          <p>\r\n            {text.length > 0\r\n              ? text\r\n              : \"Enter something in the text-box above to preview it here\"}\r\n          </p>\r\n        </div>\r\n      </div>\r\n      <div className=\"container go-up-page\" onClick={scrollSmoth}>\r\n        <i\r\n          className=\"fa fa-arrow-up appearance-change\"\r\n          style={{ color: props.switchMode === \"light\" ? \"#818a91\" : \"white\" }}\r\n        ></i>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nTextForm.prototype = {\r\n  heading: PropTypes.string,\r\n};\r\n\r\nTextForm.defaultProps = {\r\n  heading: \"Enter The Text To Analyze !!!\",\r\n};\r\n","import React from \"react\";\r\n\r\nexport default function Alert(props) {\r\n  const capitalize = (text) => {\r\n    return text.charAt(0).toUpperCase() + text.slice(1);\r\n  };\r\n  return (\r\n    // <div className={`alert alert-${props.}`} role=\"alert\">\r\n    //   A simple primary alert—check it out!\r\n    // </div>\r\n    <div style={{height: '50px'}}>\r\n    {props.alert && \r\n      <div\r\n        className={`alert alert-${props.alert.type} alert-dismissible fade show`}\r\n        role=\"alert\"\r\n      >\r\n        <strong>{capitalize(props.alert.type)}</strong>:{\" \"}\r\n        {capitalize(props.alert.mssge)}\r\n      </div> }\r\n      </div>\r\n    \r\n  );\r\n}","import React from \"react\";\r\nimport \"./Footer.css\";\r\nimport 'font-awesome/css/font-awesome.min.css';\r\n\r\nexport default function Footer(props) {\r\n  return (\r\n    <footer className=\"site-footer\" style={{backgroundColor:props.switchMode==='light'?'#f8f9fa':'#26272b'}}>\r\n      <div className=\"container\">\r\n        <div className=\"row\" style={{justifyContent:\"center\"}}>\r\n          <div className=\"col-sm-12 col-md-6\">\r\n            <h6 style={{textAlign: \"center\",color:props.switchMode==='light'?'black':'white'}}>About Us</h6>\r\n            <p className=\"text-justify\" style={{color:props.switchMode==='light'?'black':'white'}}>\r\n              Text Utils is a word counter or character counter utility which can\r\n              be used to manipulate your text in the way you want. You can\r\n              remove extra spaces, copy the manipulated text as well as convert\r\n              text from Uppercase to Lowercase and Lowercase to Uppercase\r\n            </p>\r\n          </div>\r\n        </div>\r\n        <hr />\r\n        <div className=\"row\" style={{justifyContent:\"center\"}}>\r\n        <div className=\"col-sm-12 col-md-8\" style={{position:\"relative\"}}>\r\n        <p style={{textAlign: \"center\",color:props.switchMode==='light'?'black':'white'}}>&copy; Rights Text Utils. All Rights Reserved</p>\r\n        <p style={{textAlign: \"center\",color:props.switchMode==='light'?'black':'white'}}>Created By Kamal Umesh Pandey</p>\r\n        <div className=\"social-links\">\r\n            <ul className=\"social-icons\" >\r\n              <li>\r\n                <a className=\"linkedin\"  href=\"https://www.linkedin.com/in/kamal-pandey-505471124\">\r\n                  <i className=\"fa fa-linkedin\"></i>\r\n                </a>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n        </div>\r\n      </div>\r\n    </footer>\r\n  );\r\n}\r\n","import \"./App.css\";\r\nimport Navbar from \"./components/Navbar\";\r\nimport TextForm from \"./components/TextForm\";\r\nimport { useState, useEffect } from \"react\";\r\nimport Alert from \"./components/Alert\";\r\nimport Footer from \"./components/Footer\";\r\nfunction App() {\r\n  const [mode, setMode] = useState(\"light\");\r\n  const [headerText, setHeaderText] = useState(\"Try TextUtils - Word Counter, Character Counter, Remove extra spaces !!!\");\r\n  const [alert, setAlert] = useState(null);\r\n\r\n  const showAlert = (alertType, alertMessage) => {\r\n    setAlert({\r\n      type: alertType,\r\n      mssge: alertMessage,\r\n    });\r\n    setTimeout(() => {\r\n      setAlert(null);\r\n    }, 1500);\r\n  };\r\n\r\n  const toggleMode = () => {\r\n    if (mode === \"light\") {\r\n      setMode(\"dark\");\r\n      document.body.style.backgroundColor = \"#202124\";\r\n      document.getElementById(\"modeLabel\").innerHTML = \"Switch To Light Mode\";\r\n      showAlert(\"success\", \"switcht to dark mode\");\r\n    } else {\r\n      setMode(\"light\");\r\n      document.body.style.backgroundColor = \"white\";\r\n      document.getElementById(\"modeLabel\").innerHTML = \"Switch To Dark Mode\";\r\n      showAlert(\"success\", \"switch to light mode\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        <Navbar\r\n          navbarTiltle=\"Text Utils\"\r\n          about=\"About TextUtils\"\r\n          switchMode={mode}\r\n          toggleMode={toggleMode}\r\n        ></Navbar>\r\n        <Alert alert={alert}></Alert>\r\n        <TextForm\r\n          heading={headerText}\r\n          switchMode={mode}\r\n          showAlert={showAlert}\r\n        />\r\n      </div>\r\n      <Footer switchMode={mode}></Footer>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}